{
  "swagger": "2.0",
  "info": {
    "version": "v3",
    "title": "Bittrex API",
    "description": "API for interacting with the bittrex.com exchange"
  },
  "host": "api.bittrex.com",
  "basePath": "/v3",
  "schemes": ["https"],
  "paths": {
    "/account": {
      "get": {
        "tags": ["Account"],
        "description": "Retrieve information for the account associated with the request.\r\nFor now, it only echoes the subaccount if one was specified in the header,\r\nwhich can be used to verify that one is operating on the intended account.\r\nMore fields will be added later.",
        "operationId": "Account_Get",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/account/volume": {
      "get": {
        "tags": ["Account"],
        "description": "Get 30 day volume for account",
        "operationId": "Account_GetAccountVolume",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountVolume"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/addresses": {
      "get": {
        "tags": ["Addresses"],
        "description": "List deposit addresses that have been requested or provisioned.",
        "operationId": "Addresses_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "post": {
        "tags": ["Addresses"],
        "description": "Request provisioning of a deposit address for a currency for which no address has been requested or provisioned.",
        "operationId": "Addresses_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newAddress",
            "in": "body",
            "description": "information including ID of the currency to provision a deposit address for",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewAddress"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/addresses/{currencySymbol}": {
      "get": {
        "tags": ["Addresses"],
        "description": "Retrieve the status of the deposit address for a particular currency for which one has been requested or provisioned.",
        "operationId": "Addresses_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "currencySymbol",
            "in": "path",
            "description": "symbol of the currency to retrieve the deposit address for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/balances": {
      "get": {
        "tags": ["Balances"],
        "description": "List account balances across available currencies.\r\nReturns a Balance entry for each currency for which there is either a balance or an address.",
        "operationId": "Balances_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Balance"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "head": {
        "tags": ["Balances"],
        "description": "Get sequence of balances snapshot.",
        "operationId": "Balances_GetBalancesNonce",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/balances/{currencySymbol}": {
      "get": {
        "tags": ["Balances"],
        "description": "Retrieve account balance for a specific currency.\r\nRequest will always succeed when the currency exists, regardless of whether there is a balance or address.",
        "operationId": "Balances_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "currencySymbol",
            "in": "path",
            "description": "unique symbol of the currency to retrieve the account balance for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders/{conditionalOrderId}": {
      "get": {
        "tags": ["ConditionalOrders"],
        "description": "Retrieve information on a specific conditional order.",
        "operationId": "ConditionalOrders_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "conditionalOrderId",
            "in": "path",
            "description": "ID of conditional order to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConditionalOrder"
            }
          }
        },
        "x-btx-authenticated": true
      },
      "delete": {
        "tags": ["ConditionalOrders"],
        "description": "Cancel a conditional order.",
        "operationId": "ConditionalOrders_Delete",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "conditionalOrderId",
            "in": "path",
            "description": "ID of order to cancel",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConditionalOrder"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders/closed": {
      "get": {
        "tags": ["ConditionalOrders"],
        "description": "List closed conditional orders.\r\nStartDate and EndDate filters apply to the ClosedAt field.\r\nPagination and the sort order of the results are in inverse order of the ClosedAt field.",
        "operationId": "ConditionalOrders_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "query",
            "description": "filter by market (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConditionalOrder"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders/open": {
      "get": {
        "tags": ["ConditionalOrders"],
        "description": "List open conditional orders.",
        "operationId": "ConditionalOrders_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "query",
            "description": "filter by market (optional)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConditionalOrder"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "head": {
        "tags": ["ConditionalOrders"],
        "description": "Get sequence of open conditional orders snapshot.",
        "operationId": "ConditionalOrders_GetOpenConditionalOrdersNonce",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders": {
      "post": {
        "tags": ["ConditionalOrders"],
        "description": "Create a new conditional order.",
        "operationId": "ConditionalOrders_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newConditionalOrder",
            "in": "body",
            "description": "information specifying the conditional order to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewConditionalOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ConditionalOrder"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/currencies": {
      "get": {
        "tags": ["Currencies"],
        "description": "List currencies.",
        "operationId": "Currencies_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Currency"
              }
            }
          }
        }
      }
    },
    "/currencies/{symbol}": {
      "get": {
        "tags": ["Currencies"],
        "description": "Retrieve info on a specified currency.",
        "operationId": "Currencies_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "symbol of the currency to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        }
      }
    },
    "/deposits/open": {
      "get": {
        "tags": ["Deposits"],
        "description": "List open deposits. Results are sorted in inverse order of UpdatedAt, and are limited to the first 1000.",
        "operationId": "Deposits_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "filter by an open deposit status (optional)",
            "required": false,
            "type": "string",
            "enum": ["PENDING"]
          },
          {
            "name": "currencySymbol",
            "in": "query",
            "description": "filter by currency (optional)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "head": {
        "tags": ["Deposits"],
        "description": "Get open deposits sequence.",
        "operationId": "Deposits_GetOpenDepositsSequence",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/deposits/closed": {
      "get": {
        "tags": ["Deposits"],
        "description": "List closed deposits. StartDate and EndDate filters apply to the CompletedAt field.\r\nPagination and the sort order of the results are in inverse order of the CompletedAt field.",
        "operationId": "Deposits_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "filter by deposit status (optional)",
            "required": false,
            "type": "string",
            "enum": ["COMPLETED", "ORPHANED", "INVALIDATED"]
          },
          {
            "name": "currencySymbol",
            "in": "query",
            "description": "filter by currency (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/deposits/ByTxId/{txId}": {
      "get": {
        "tags": ["Deposits"],
        "description": "Retrieves all deposits for this account with the given TxId",
        "operationId": "Deposits_ListByTxId",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "txId",
            "in": "path",
            "description": "the transaction id to lookup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/deposits/{depositId}": {
      "get": {
        "tags": ["Deposits"],
        "description": "Retrieve information for a specific deposit.",
        "operationId": "Deposits_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "depositId",
            "in": "path",
            "description": "ID of the deposit to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/markets": {
      "get": {
        "tags": ["Markets"],
        "description": "List markets.",
        "operationId": "Markets_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Market"
              }
            }
          }
        }
      }
    },
    "/markets/summaries": {
      "get": {
        "tags": ["Markets"],
        "description": "List summaries of the last 24 hours of activity for all markets.",
        "operationId": "Markets_ListSummaries",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketSummary"
              }
            }
          }
        }
      },
      "head": {
        "tags": ["Markets"],
        "description": "Retrieve the current sequence number for the market summaries snapshot.",
        "operationId": "Markets_GetSummariesNonce",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/markets/tickers": {
      "get": {
        "tags": ["Markets"],
        "description": "List tickers for all markets.",
        "operationId": "Markets_ListTickers",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ticker"
              }
            }
          }
        }
      },
      "head": {
        "tags": ["Markets"],
        "description": "Retrieve the current sequence number for the tickers snapshot.",
        "operationId": "Markets_GetTickersNonce",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ticker"
              }
            }
          }
        }
      }
    },
    "/markets/{marketSymbol}/ticker": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve the ticker for a specific market.",
        "operationId": "Markets_GetMarketTicker",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve ticker for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticker"
            }
          }
        }
      }
    },
    "/markets/{marketSymbol}": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve information for a specific market.",
        "operationId": "Markets_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Market"
            }
          }
        }
      }
    },
    "/markets/{marketSymbol}/summary": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve summary of the last 24 hours of activity for a specific market.",
        "operationId": "Markets_GetSummary",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve summary for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MarketSummary"
            }
          }
        }
      }
    },
    "/markets/{marketSymbol}/orderbook": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve the order book for a specific market.",
        "operationId": "Markets_GetOrderBook",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve order book for",
            "required": true,
            "type": "string"
          },
          {
            "name": "depth",
            "in": "query",
            "description": "maximum depth of order book to return (optional, allowed values are [1, 25, 500], default is 25)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderBook"
            }
          }
        }
      },
      "head": {
        "tags": ["Markets"],
        "description": "Retrieve the current sequence number for the specified market's order book snapshot.",
        "operationId": "Markets_GetOrderBookNonce",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve order book for",
            "required": true,
            "type": "string"
          },
          {
            "name": "depth",
            "in": "query",
            "description": "maximum depth of order book to return (optional, allowed values are [1, 25, 500], default is 25)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/markets/{marketSymbol}/trades": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve the recent trades for a specific market.",
        "operationId": "Markets_GetTrades",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve recent trades for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/markets/{marketSymbol}/trade": {
      "head": {
        "tags": ["Markets"],
        "description": "Retrieve the current sequence number for the specified market's recent trades snapshot.",
        "operationId": "Markets_GetTradesNonce",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve order book for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/markets/{marketSymbol}/candles/{candleInterval}/recent": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve recent candles for a specific market and candle interval.\r\nThe maximum age of the returned candles depends on the interval as follows:\r\n(MINUTE_1: 1 day, MINUTE_5: 1 day, HOUR_1: 31 days, DAY_1: 366 days).\r\nCandles for intervals without any trading activity are omitted.",
        "operationId": "Markets_GetCandlesRecent",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve candles for",
            "required": true,
            "type": "string"
          },
          {
            "name": "candleInterval",
            "in": "path",
            "description": "desired time interval between candles",
            "required": true,
            "type": "string",
            "enum": ["MINUTE_1", "MINUTE_5", "HOUR_1", "DAY_1"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Candle"
              }
            }
          }
        }
      },
      "head": {
        "tags": ["Markets"],
        "description": "Retrieve the current sequence number for the specified market's candles snapshot.",
        "operationId": "Markets_GetCandlesSequence",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve candles for",
            "required": true,
            "type": "string"
          },
          {
            "name": "candleInterval",
            "in": "path",
            "description": "desired time interval between candles",
            "required": true,
            "type": "string",
            "enum": ["MINUTE_1", "MINUTE_5", "HOUR_1", "DAY_1"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve recent candles for a specific market and candle interval.\r\nThe date range of returned candles depends on the interval as follows:\r\n(MINUTE_1: 1 day, MINUTE_5: 1 day, HOUR_1: 31 days, DAY_1: 366 days).\r\nCandles for intervals without any trading activity are omitted.",
        "operationId": "Markets_GetCandlesHistorical",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "path",
            "description": "symbol of market to retrieve candles for",
            "required": true,
            "type": "string"
          },
          {
            "name": "candleInterval",
            "in": "path",
            "description": "desired time interval between candles",
            "required": true,
            "type": "string",
            "enum": ["MINUTE_1", "MINUTE_5", "HOUR_1", "DAY_1"]
          },
          {
            "name": "year",
            "in": "path",
            "description": "desired year to start from",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "path",
            "description": "desired month to start from (if applicable)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "path",
            "description": "desired day to start from (if applicable)",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Candle"
              }
            }
          }
        }
      }
    },
    "/orders/closed": {
      "get": {
        "tags": ["Orders"],
        "description": "List closed orders.  \r\nStartDate and EndDate filters apply to the ClosedAt field.\r\nPagination and the sort order of the results are in inverse order of the ClosedAt field.",
        "operationId": "Orders_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "query",
            "description": "filter by market (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/orders/open": {
      "get": {
        "tags": ["Orders"],
        "description": "List open orders.",
        "operationId": "Orders_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "query",
            "description": "filter by market (optional)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "delete": {
        "tags": ["Orders"],
        "description": "Bulk cancel all open orders (can be limited to a specified market)",
        "operationId": "Orders_BulkCancel",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "marketSymbol",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCancelResult"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "head": {
        "tags": ["Orders"],
        "description": "Get sequence of open orders snapshot.",
        "operationId": "Orders_GetOpenOrdersNonce",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": ["Orders"],
        "description": "Retrieve information on a specific order.",
        "operationId": "Orders_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "x-btx-authenticated": true
      },
      "delete": {
        "tags": ["Orders"],
        "description": "Cancel an order.",
        "operationId": "Orders_Delete",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to cancel",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/orders/{orderId}/executions": {
      "get": {
        "tags": ["Orders"],
        "description": "Retrieve executions for a specific order. Results are sorted in inverse order of execution time, and are limited to the first 1000.\r\nNOTE: Executions from before 5/27/2019 are not available. Also, there may be a delay before an executed trade is visible in this endpoint.",
        "operationId": "Orders_GetOrderExecutions",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to retrieve executions for",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Execution"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/orders": {
      "post": {
        "tags": ["Orders"],
        "description": "Create a new order.",
        "operationId": "Orders_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newOrder",
            "in": "body",
            "description": "information specifying the order to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/ping": {
      "get": {
        "tags": ["Ping"],
        "description": "Pings the service",
        "operationId": "Ping_Get",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServicePing"
            }
          }
        }
      }
    },
    "/subaccounts": {
      "get": {
        "tags": ["Subaccounts"],
        "description": "List subaccounts. _(NOTE: This API is limited to partners and not available for traders.)_\r\nPagination and the sort order of the results are in inverse order of the CreatedAt field.",
        "operationId": "Subaccounts_List",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subaccount"
              }
            }
          }
        },
        "x-btx-authenticated": true
      },
      "post": {
        "tags": ["Subaccounts"],
        "description": "Create a new subaccount. _(NOTE: This API is limited to partners and not available for traders.)_",
        "operationId": "Subaccounts_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newSubaccount",
            "in": "body",
            "description": "information specifying the subaccount to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewSubaccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/subaccounts/{subaccountId}": {
      "get": {
        "tags": ["Subaccounts"],
        "description": "Retrieve details for a specified subaccount. _(NOTE: This API is limited to partners and not available for traders.)_",
        "operationId": "Subaccounts_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "subaccountId",
            "in": "path",
            "description": "ID of the subaccount to retrieve details for",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/transfers/sent": {
      "get": {
        "tags": ["Transfers"],
        "description": "List sent transfers.(NOTE: This API is limited to partners and not available for traders.)\r\nPagination and the sort order of the results are in inverse order of the Executed field.",
        "operationId": "Transfers_ListSent",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "toSubaccountId",
            "in": "query",
            "description": "filter transfers to a sub account id (optional)",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "toMasterAccount",
            "in": "query",
            "description": "filter transfers to master account (optional)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "currencySymbol",
            "in": "query",
            "description": "filter by currency (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SentTransferInfo"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/transfers/received": {
      "get": {
        "tags": ["Transfers"],
        "description": "List received transfers.(NOTE: This API is limited to partners and not available for traders.)\r\nPagination and the sort order of the results are in inverse order of the Executed field.",
        "operationId": "Transfers_ListReceived",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "fromSubaccountId",
            "in": "query",
            "description": "filter transfers from a sub account id (optional)",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "fromMasterAccount",
            "in": "query",
            "description": "filter transfers from master account (optional)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "currencySymbol",
            "in": "query",
            "description": "filter by currency (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReceivedTransferInfo"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/transfers/{transferId}": {
      "get": {
        "tags": ["Transfers"],
        "description": "Retrieve information on the specified transfer.(NOTE: This API is limited to partners and not available for traders.)",
        "operationId": "Transfers_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "transferId",
            "in": "path",
            "description": "ID of the transfer to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReceivedTransferInfo"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/transfers": {
      "post": {
        "tags": ["Transfers"],
        "description": "Executes a new transfer.(NOTE: This API is limited to partners and not available for traders.)",
        "operationId": "Transfers_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newTransfer",
            "in": "body",
            "description": "information specifying the transfer to execute",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewTransfer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NewTransfer"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/withdrawals/open": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "List open withdrawals.  Results are sorted in inverse order of the CreatedAt field, and are limited to the first 1000.",
        "operationId": "Withdrawals_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "filter by an open withdrawal status (optional)",
            "required": false,
            "type": "string",
            "enum": [
              "REQUESTED",
              "AUTHORIZED",
              "PENDING",
              "ERROR_INVALID_ADDRESS"
            ]
          },
          {
            "name": "currencySymbol",
            "in": "query",
            "description": "filter by currency (optional)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdrawal"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/withdrawals/closed": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "List closed withdrawals.  StartDate and EndDate filters apply to the CompletedAt field.\r\nPagination and the sort order of the results are in inverse order of the CompletedAt field.",
        "operationId": "Withdrawals_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "filter by withdrawal status (optional)",
            "required": false,
            "type": "string",
            "enum": ["COMPLETED", "CANCELLED"]
          },
          {
            "name": "currencySymbol",
            "in": "query",
            "description": "filter by currency (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "previousPageToken",
            "in": "query",
            "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdrawal"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/withdrawals/ByTxId/{txId}": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "Retrieves all withdrawals for this account with the given TxId",
        "operationId": "Withdrawals_ListByTxId",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "txId",
            "in": "path",
            "description": "the transaction id to lookup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdrawal"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/withdrawals/{withdrawalId}": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "Retrieve information on a specified withdrawal.",
        "operationId": "Withdrawals_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "withdrawalId",
            "in": "path",
            "description": "ID of withdrawal to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        },
        "x-btx-authenticated": true
      },
      "delete": {
        "tags": ["Withdrawals"],
        "description": "Cancel a withdrawal. (Withdrawals can only be cancelled if status is REQUESTED, AUTHORIZED, or ERROR_INVALID_ADDRESS.)",
        "operationId": "Withdrawals_Delete",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "withdrawalId",
            "in": "path",
            "description": "ID of withdrawal to cancel",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/withdrawals": {
      "post": {
        "tags": ["Withdrawals"],
        "description": "Create a new withdrawal.",
        "operationId": "Withdrawals_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newWithdrawal",
            "in": "body",
            "description": "information specifying the withdrawal to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewWithdrawal"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/withdrawals/whitelistAddresses": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "Returns a list of white listed addresses.",
        "operationId": "Withdrawals_WhitelistAddresses",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WhiteListAddress"
            }
          }
        },
        "x-btx-authenticated": true
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "subaccountId": {
          "format": "uuid",
          "description": "the subaccount ID associated with this request if one was specified in the header (optional)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "accountId": {
          "format": "uuid",
          "description": "The account ID associated with this request only for master accounts",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "AccountVolume": {
      "type": "object",
      "properties": {
        "updated": {
          "format": "date-time",
          "description": "Date and time indicating as when volume was updated",
          "type": "string"
        },
        "volume30days": {
          "format": "double",
          "description": "30 day volume information.",
          "type": "number"
        }
      }
    },
    "Address": {
      "required": ["status", "currencySymbol"],
      "type": "object",
      "properties": {
        "status": {
          "description": "the status of this deposit address",
          "enum": ["REQUESTED", "PROVISIONED"],
          "type": "string"
        },
        "currencySymbol": {
          "description": "the unique ID of the currency this deposit address is for",
          "type": "string"
        },
        "cryptoAddress": {
          "description": "the cryptographic deposit address (optional, only set if Status is PROVISIONED)",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "the cryptographic deposit address tag (optional, only set if Status is PROVISIONED)\r\nNOTE: This only applies for currencies whose coinType requires it.",
          "type": "string"
        }
      }
    },
    "NewAddress": {
      "required": ["currencySymbol"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "the currency ID to provision a new address for",
          "type": "string"
        }
      }
    },
    "Balance": {
      "required": ["currencySymbol", "total", "available", "updatedAt"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "unique ID for the currency this balance is associated with",
          "type": "string"
        },
        "total": {
          "format": "double",
          "description": "total amount",
          "type": "number"
        },
        "available": {
          "format": "double",
          "description": "available amount",
          "type": "number"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "time stamp when this balance was last updated",
          "type": "string"
        }
      }
    },
    "ConditionalOrder": {
      "required": ["id", "marketSymbol", "operand", "status", "createdAt"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this order, assigned by the service\r\nNote that this ID is completely unrelated to the optional clientConditionalOrderId.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "marketSymbol": {
          "description": "unique symbol of the market this conditional order will be tracking",
          "type": "string"
        },
        "operand": {
          "description": "price above (GTE) or below (LTE) which the conditional order will trigger\r\nThis value will be set automatically if trailingStopPercent is specified.\r\n(either this or trailingStopPercent must be specified)",
          "enum": ["LTE", "GTE"],
          "type": "string"
        },
        "triggerPrice": {
          "format": "double",
          "description": "percent above the minimum price (GTE) or below the maximum price (LTE) at which to trigger\r\n(either this or triggerPrice must be specified)",
          "type": "number"
        },
        "trailingStopPercent": {
          "format": "double",
          "description": "The stop price will automatically adjust relative to the most extreme trade value seen.\r\n(either this or trigger price must be specified)",
          "type": "number"
        },
        "createdOrderId": {
          "format": "uuid",
          "description": "unique ID of the order that was created by this conditional, if there is one",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "orderToCreate": {
          "$ref": "#/definitions/NewOrder",
          "description": "order to create if this conditional order is triggered"
        },
        "orderToCancel": {
          "$ref": "#/definitions/NewCancelConditionalOrder",
          "description": "order or conditional order to cancel if this conditional order triggers\r\nNote that this relationship is reciprocal."
        },
        "clientConditionalOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for idempotency (optional)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "status": {
          "description": "conditional order status",
          "enum": ["OPEN", "COMPLETED", "CANCELLED", "FAILED"],
          "type": "string"
        },
        "orderCreationErrorCode": {
          "description": "if a conditional order fails to create an order when triggered, the failure reason will appear here",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of order creation (always present)",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of last order update (optional)",
          "type": "string"
        },
        "closedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) when this order was closed (optional)",
          "type": "string"
        }
      }
    },
    "NewOrder": {
      "required": ["marketSymbol", "direction", "type", "timeInForce"],
      "type": "object",
      "properties": {
        "marketSymbol": {
          "description": "unique symbol of the market this order is being placed on",
          "type": "string"
        },
        "direction": {
          "description": "order direction",
          "enum": ["BUY", "SELL"],
          "type": "string"
        },
        "type": {
          "description": "order type",
          "enum": ["LIMIT", "MARKET", "CEILING_LIMIT", "CEILING_MARKET"],
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity (optional, must be included for non-ceiling orders and excluded for ceiling orders)",
          "type": "number"
        },
        "ceiling": {
          "format": "double",
          "description": "ceiling (optional, must be included for ceiling orders and excluded for non-ceiling orders)",
          "type": "number"
        },
        "limit": {
          "format": "double",
          "description": "limit (optional, must be included for LIMIT orders and excluded for MARKET orders)",
          "type": "number"
        },
        "timeInForce": {
          "description": "time in force",
          "enum": [
            "GOOD_TIL_CANCELLED",
            "IMMEDIATE_OR_CANCEL",
            "FILL_OR_KILL",
            "POST_ONLY_GOOD_TIL_CANCELLED",
            "BUY_NOW"
          ],
          "type": "string"
        },
        "clientOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for advanced order tracking (optional)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "useAwards": {
          "description": "option to use Bittrex credits for the order (optional)",
          "type": "boolean"
        }
      }
    },
    "NewCancelConditionalOrder": {
      "required": ["type"],
      "type": "object",
      "properties": {
        "type": {
          "description": "type of order to cancel",
          "enum": ["ORDER", "CONDITIONAL_ORDER"],
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "uuid of the order or conditional order to cancel",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "PaginationParameters": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "type": "string"
        },
        "previousPageToken": {
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "type": "string"
        },
        "pageSize": {
          "format": "int32",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "type": "integer"
        }
      }
    },
    "DateFilter": {
      "type": "object",
      "properties": {
        "startDate": {
          "format": "date-time",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "type": "string"
        }
      }
    },
    "NewConditionalOrder": {
      "required": ["marketSymbol", "operand"],
      "type": "object",
      "properties": {
        "marketSymbol": {
          "description": "unique symbol of the market this conditional order will be tracking",
          "type": "string"
        },
        "operand": {
          "description": "price above (GTE) or below (LTE) which the conditional order will trigger\r\nThis value will be set automatically if trailingStopPercent is specified.\r\n(either this or trailingStopPercent must be specified)",
          "enum": ["LTE", "GTE"],
          "type": "string"
        },
        "triggerPrice": {
          "format": "double",
          "description": "percent above the minimum price (GTE) or below the maximum price (LTE) at which to trigger\r\n(either this or triggerPrice must be specified)",
          "type": "number"
        },
        "trailingStopPercent": {
          "format": "double",
          "description": "The stop price will automatically adjust relative to the most extreme trade value seen.\r\n(either this or trigger price must be specified)",
          "type": "number"
        },
        "orderToCreate": {
          "$ref": "#/definitions/NewOrder",
          "description": "order to create if this conditional order is triggered"
        },
        "orderToCancel": {
          "$ref": "#/definitions/NewCancelConditionalOrder",
          "description": "order or conditional order to cancel if this conditional order triggers\r\nNote that this relationship is reciprocal."
        },
        "clientConditionalOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for idempotency (optional)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this currency",
          "type": "string"
        },
        "name": {
          "description": "long name of this currency",
          "type": "string"
        },
        "coinType": {
          "description": "coin type of this currency",
          "type": "string"
        },
        "status": {
          "description": "currency status (online, offline, etc.)",
          "enum": ["ONLINE", "OFFLINE"],
          "type": "string"
        },
        "minConfirmations": {
          "format": "int32",
          "description": "minimum number of confirmations",
          "type": "integer"
        },
        "notice": {
          "description": "news or alerts regarding this currency",
          "type": "string"
        },
        "txFee": {
          "format": "double",
          "description": "transaction fee for this currency",
          "type": "number"
        },
        "logoUrl": {
          "description": "url to the logo image for this currency, if available",
          "type": "string"
        },
        "prohibitedIn": {
          "description": "list of prohibited regions. empty if its not restricted.",
          "type": "array",
          "items": {
            "enum": ["US"],
            "type": "string"
          }
        },
        "baseAddress": {
          "description": "base address for the currency.",
          "type": "string"
        },
        "associatedTermsOfService": {
          "description": "list of associated terms of service.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Deposit": {
      "required": [
        "id",
        "currencySymbol",
        "quantity",
        "cryptoAddress",
        "confirmations",
        "updatedAt",
        "status"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID for this deposit, assigned by the service",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "currencySymbol": {
          "description": "unique symbol of the currency being deposited to",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity to deposit",
          "type": "number"
        },
        "cryptoAddress": {
          "description": "crypto address for this deposit",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "crypto address tag for this deposit (optional, depends on the coin type of currency being deposited)",
          "type": "string"
        },
        "txId": {
          "description": "TxID for the deposit (optional)",
          "type": "string"
        },
        "confirmations": {
          "format": "int32",
          "description": "current count of confirmations",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "time stamp when this deposit was last updated",
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "description": "time stamp when this deposit was completed (optional, only set when status is COMPLETED)",
          "type": "string"
        },
        "status": {
          "description": "current status of this deposit",
          "enum": ["PENDING", "COMPLETED", "ORPHANED", "INVALIDATED"],
          "type": "string"
        },
        "source": {
          "description": "source of the deposit",
          "enum": ["BLOCKCHAIN", "WIRE_TRANSFER", "CREDIT_CARD"],
          "type": "string"
        }
      }
    },
    "Market": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this market",
          "type": "string"
        },
        "baseCurrencySymbol": {
          "description": "unique symbol for base currency",
          "type": "string"
        },
        "quoteCurrencySymbol": {
          "description": "unique symbol for quote currency",
          "type": "string"
        },
        "minTradeSize": {
          "format": "double",
          "description": "minimum trade size",
          "type": "number"
        },
        "precision": {
          "format": "int32",
          "description": "maximum allowed precision for the limit price on an order",
          "type": "integer"
        },
        "status": {
          "description": "true if this market is currently active",
          "enum": ["ONLINE", "OFFLINE"],
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp in UTC when this market was created",
          "type": "string"
        },
        "notice": {
          "description": "notice or alert info",
          "type": "string"
        },
        "prohibitedIn": {
          "description": "list of prohibited regions. empty if its not restricted.",
          "type": "array",
          "items": {
            "enum": ["US"],
            "type": "string"
          }
        },
        "associatedTermsOfService": {
          "description": "list of associated terms of service.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MarketSummary": {
      "required": [
        "symbol",
        "high",
        "low",
        "volume",
        "quoteVolume",
        "percentChange",
        "updatedAt"
      ],
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this market",
          "type": "string"
        },
        "high": {
          "format": "double",
          "description": "highest price of a trade that occurred within the last 24 hours\r\n(or zero if there were no trades)",
          "type": "number"
        },
        "low": {
          "format": "double",
          "description": "lowest price of a trade that occurred within the last 24 hours\r\n(or zero if there were no trades)",
          "type": "number"
        },
        "volume": {
          "format": "double",
          "description": "volume within the last 24 hours",
          "type": "number"
        },
        "quoteVolume": {
          "format": "double",
          "description": "quote volume within the last 24 hours",
          "type": "number"
        },
        "percentChange": {
          "format": "double",
          "description": "percentage change of the exchange rate over the last 24 hours (positive or negative)",
          "type": "number"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "timestamp in UTC when market summary was last updated",
          "type": "string"
        }
      }
    },
    "Ticker": {
      "required": ["lastTradeRate", "bidRate", "askRate"],
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this market",
          "type": "string"
        },
        "lastTradeRate": {
          "format": "double",
          "description": "price of the last trade\r\n(or zero if there were no trades)",
          "type": "number"
        },
        "bidRate": {
          "format": "double",
          "description": "rate of the current best bid\r\n(or zero if there are no bids)",
          "type": "number"
        },
        "askRate": {
          "format": "double",
          "description": "rate of the current best ask\r\n(or zero if there are no asks)",
          "type": "number"
        }
      }
    },
    "OrderBook": {
      "required": ["bid", "ask"],
      "type": "object",
      "properties": {
        "bid": {
          "description": "buy entries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBookEntry"
          }
        },
        "ask": {
          "description": "sell entries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBookEntry"
          }
        }
      }
    },
    "OrderBookEntry": {
      "required": ["quantity", "rate"],
      "type": "object",
      "properties": {
        "quantity": {
          "format": "double",
          "description": "quantity",
          "type": "number"
        },
        "rate": {
          "format": "double",
          "description": "rate",
          "type": "number"
        }
      }
    },
    "Trade": {
      "required": ["id", "executedAt", "quantity", "rate", "takerSide"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this trade, assigned by the service (always present)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "executedAt": {
          "format": "date-time",
          "description": "timestamp in UTC when order was filled",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity",
          "type": "number"
        },
        "rate": {
          "format": "double",
          "description": "rate",
          "type": "number"
        },
        "takerSide": {
          "description": "taker side (specifies whether the taker was the buy or sellside)",
          "enum": ["BUY", "SELL"],
          "type": "string"
        }
      }
    },
    "Candle": {
      "required": [
        "startsAt",
        "open",
        "high",
        "low",
        "close",
        "volume",
        "quoteVolume"
      ],
      "type": "object",
      "properties": {
        "startsAt": {
          "format": "date-time",
          "description": "time stamp in UTC for when this candle's time interval starts",
          "type": "string"
        },
        "open": {
          "format": "double",
          "description": "open",
          "type": "number"
        },
        "high": {
          "format": "double",
          "description": "high",
          "type": "number"
        },
        "low": {
          "format": "double",
          "description": "low",
          "type": "number"
        },
        "close": {
          "format": "double",
          "description": "close",
          "type": "number"
        },
        "volume": {
          "format": "double",
          "description": "volume",
          "type": "number"
        },
        "quoteVolume": {
          "format": "double",
          "description": "quoute volume",
          "type": "number"
        }
      }
    },
    "Order": {
      "required": [
        "id",
        "marketSymbol",
        "direction",
        "type",
        "timeInForce",
        "fillQuantity",
        "commission",
        "proceeds",
        "status",
        "createdAt"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this order, assigned by the service (always present)\r\nNote that this ID is completely unrelated to the optional ClientOrderId.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "marketSymbol": {
          "description": "unique symbol of the market this order is being placed on (always present, matches the field in NewOrder)",
          "type": "string"
        },
        "direction": {
          "description": "order direction (always present, matches the field in NewOrder)",
          "enum": ["BUY", "SELL"],
          "type": "string"
        },
        "type": {
          "description": "order type (always present, matches the field in NewOrder)",
          "enum": ["LIMIT", "MARKET", "CEILING_LIMIT", "CEILING_MARKET"],
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity (optional, matches the field in NewOrder)",
          "type": "number"
        },
        "limit": {
          "format": "double",
          "description": "limit price (optional, matches the field in NewOrder)",
          "type": "number"
        },
        "ceiling": {
          "format": "double",
          "description": "ceiling (optional, matches the field in NewOrder)",
          "type": "number"
        },
        "timeInForce": {
          "description": "time in force (always present, matches the field in NewOrder)",
          "enum": [
            "GOOD_TIL_CANCELLED",
            "IMMEDIATE_OR_CANCEL",
            "FILL_OR_KILL",
            "POST_ONLY_GOOD_TIL_CANCELLED",
            "BUY_NOW"
          ],
          "type": "string"
        },
        "clientOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for advanced order tracking (optional, matches the field in NewOrder)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "fillQuantity": {
          "format": "double",
          "description": "fill quantity (always present, even when there is no fill)",
          "type": "number"
        },
        "commission": {
          "format": "double",
          "description": "commission (always present, even when there is no fill)",
          "type": "number"
        },
        "proceeds": {
          "format": "double",
          "description": "proceeds (always present, even when there is no fill)",
          "type": "number"
        },
        "status": {
          "description": "order status (always present)",
          "enum": ["OPEN", "CLOSED"],
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of order creation (always present)",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of last order update (optional)",
          "type": "string"
        },
        "closedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) when this order was closed (optional)",
          "type": "string"
        },
        "orderToCancel": {
          "$ref": "#/definitions/NewCancelConditionalOrder",
          "description": "conditional order to cancel if this order executes\r\nNote that this relationship is reciprocal."
        }
      }
    },
    "BulkCancelResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "statusCode": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "Execution": {
      "required": [
        "id",
        "marketSymbol",
        "executedAt",
        "quantity",
        "rate",
        "orderId",
        "commission",
        "isTaker"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this execution, assigned by the service",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "marketSymbol": {
          "description": "market symbol where this execution took place",
          "type": "string"
        },
        "executedAt": {
          "format": "date-time",
          "description": "time when the execution was processed",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity traded during this execution",
          "type": "number"
        },
        "rate": {
          "format": "double",
          "description": "rate at which this trade was executed",
          "type": "number"
        },
        "orderId": {
          "format": "uuid",
          "description": "order ID associated with this execution",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "commission": {
          "format": "double",
          "description": "commission charged for this execution",
          "type": "number"
        },
        "isTaker": {
          "description": "true if the order ID specified was the taker for this execution, otherwise false",
          "type": "boolean"
        }
      }
    },
    "ServicePing": {
      "required": ["serverTime"],
      "type": "object",
      "properties": {
        "serverTime": {
          "format": "int64",
          "description": "Server time in epoch millisecond format, rounded down to the nearest second.\r\nThe same format must be used in the Api-Timestamp header of authenticated requests.",
          "type": "integer"
        }
      }
    },
    "Subaccount": {
      "required": ["id", "createdAt"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this subaccount",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp when this subaccount was created",
          "type": "string"
        }
      }
    },
    "NewSubaccount": {
      "type": "object",
      "properties": {}
    },
    "SentTransferInfo": {
      "required": [
        "toSubaccountId",
        "id",
        "currencySymbol",
        "amount",
        "executedAt"
      ],
      "type": "object",
      "properties": {
        "toSubaccountId": {
          "format": "uuid",
          "description": "receiver account ID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "toMasterAccount": {
          "description": "transfer to master account",
          "type": "boolean"
        },
        "id": {
          "format": "uuid",
          "description": "unique ID for this transfer",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "requestId": {
          "format": "uuid",
          "description": "client transfer id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "currencySymbol": {
          "description": "currency symbol transfered",
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "amount transfered",
          "type": "number"
        },
        "executedAt": {
          "format": "date-time",
          "description": "time stamp when this transfer was executed",
          "type": "string"
        }
      }
    },
    "ReceivedTransferInfo": {
      "required": [
        "fromSubaccountId",
        "id",
        "currencySymbol",
        "amount",
        "executedAt"
      ],
      "type": "object",
      "properties": {
        "fromSubaccountId": {
          "format": "uuid",
          "description": "sender account ID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "fromMasterAccount": {
          "description": "transfer from master account",
          "type": "boolean"
        },
        "id": {
          "format": "uuid",
          "description": "unique ID for this transfer",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "requestId": {
          "format": "uuid",
          "description": "client transfer id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "currencySymbol": {
          "description": "currency symbol transfered",
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "amount transfered",
          "type": "number"
        },
        "executedAt": {
          "format": "date-time",
          "description": "time stamp when this transfer was executed",
          "type": "string"
        }
      }
    },
    "NewTransfer": {
      "required": ["currencySymbol", "amount"],
      "type": "object",
      "properties": {
        "toSubaccountId": {
          "format": "uuid",
          "description": "receiver account ID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "requestId": {
          "format": "uuid",
          "description": "client transfer id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "currencySymbol": {
          "description": "currency symbol transfered",
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "amount transfered",
          "type": "number"
        },
        "toMasterAccount": {
          "description": "transfer to master account",
          "type": "boolean"
        }
      }
    },
    "Withdrawal": {
      "required": [
        "id",
        "currencySymbol",
        "quantity",
        "cryptoAddress",
        "status",
        "createdAt"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID for this withdrawal, assigned by the service (always present)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "currencySymbol": {
          "description": "unique symbol of currency to withdraw (always present, matches the field in NewWithdrawal)",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity to withdraw (always present, matches the field in NewWithdrawal)",
          "type": "number"
        },
        "cryptoAddress": {
          "description": "crypto address for this withdrawal (always present, matches the field in NewWithdrawal)",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "custom message further specifying how to complete the withdrawal (optional, matches the field in NewWithdrawal)",
          "type": "string"
        },
        "txCost": {
          "format": "double",
          "description": "TxCost of this withdrawal (always present)",
          "type": "number"
        },
        "txId": {
          "description": "TxID associated with this withdrawal (optional)",
          "type": "string"
        },
        "status": {
          "description": "current status of this withdrawal (always present)",
          "enum": [
            "REQUESTED",
            "AUTHORIZED",
            "PENDING",
            "COMPLETED",
            "ERROR_INVALID_ADDRESS",
            "CANCELLED"
          ],
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "time stamp when this withdrawal was initiated (always present)",
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "description": "time stamp when this withdrawal was completed (optional)",
          "type": "string"
        },
        "clientWithdrawalId": {
          "format": "uuid",
          "description": "client-provided identifier for idempotency (optional)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "NewWithdrawal": {
      "required": ["currencySymbol", "quantity", "cryptoAddress"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "unique symbol of the currency to withdraw from",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity to withdraw",
          "type": "number"
        },
        "cryptoAddress": {
          "description": "crypto address to withdraw funds to",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "custom message further specifying how to complete the withdrawal\r\n(optional, depends on whether the cryptoAddress is sufficient for this currency)",
          "type": "string"
        },
        "clientWithdrawalId": {
          "format": "uuid",
          "description": "client-provided identifier for idempotency (optional)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "WhiteListAddress": {
      "required": ["currencySymbol", "createdAt", "status", "cryptoAddress"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "the unique ID of the currency for this withdrawal whitelist address",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "date and time this address was added to the whitelist",
          "type": "string"
        },
        "status": {
          "description": "whether this address may currently be used for withdrawals or is pending the waiting period",
          "enum": ["ACTIVE", "PENDING"],
          "type": "string"
        },
        "activeAt": {
          "format": "date-time",
          "description": "date and time after which this address may be used for withdrawals",
          "type": "string"
        },
        "cryptoAddress": {
          "description": "the cryptographic address that is allowed for withdrawals",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "the cryptographic address tag that is allowed for withdrawals (optional)",
          "type": "string"
        }
      }
    },
    "DeleteOrder": {
      "description": "Payload for cancelling an existing order",
      "required": ["id"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "order Id to be cancelled.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "Error": {
      "required": ["code"],
      "type": "object",
      "properties": {
        "code": {
          "description": "error code associated with this particular error",
          "type": "string"
        },
        "detail": {
          "description": "additional information describing the error and/or the included data (optional)",
          "type": "string"
        },
        "data": {
          "description": "a set of key-value pairs containing data relevant to this particular error (optional)",
          "type": "object"
        }
      }
    }
  }
}
